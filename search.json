[{"path":"https://f-dallolio.github.io/helprrr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 helprrr authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://f-dallolio.github.io/helprrr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Filippo DallOlio. Author, maintainer.","code":""},{"path":"https://f-dallolio.github.io/helprrr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"DallOlio F (2024). helprrr: Suite Helper Convenience Functions. R package version 0.0.0.9000, https://f-dallolio.github.io/helprrr/, https://github.com/f-dallolio/helprrr.","code":"@Manual{,   title = {helprrr: Suite of Helper and Convenience Functions},   author = {Filippo DallOlio},   year = {2024},   note = {R package version 0.0.0.9000, https://f-dallolio.github.io/helprrr/},   url = {https://github.com/f-dallolio/helprrr}, }"},{"path":"https://f-dallolio.github.io/helprrr/reference/as-symbolic.html","id":null,"dir":"Reference","previous_headings":"","what":"Object(s) as symbolics — as-symbolic","title":"Object(s) as symbolics — as-symbolic","text":"functions take various R objects return equivalent symbols orcalls (e.g. \"func\" func, \"pkg::func(x, ...)\" pkg::func(x, ...), etc.`). as_symbolic_obj() returns symbolic. as_symbolic_objs() returns list symbolics length input greater one. symbolic otherwise.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/as-symbolic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object(s) as symbolics — as-symbolic","text":"","code":"as_symbolic_obj(x, with_ns = TRUE)  as_symbolic_objs(   ...,   .x = NULL,   .named = FALSE,   .name_all = FALSE,   .names_type = c(\"full\", \"sym\", \"head\") )"},{"path":"https://f-dallolio.github.io/helprrr/reference/as-symbolic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object(s) as symbolics — as-symbolic","text":"x R object. Precisely, syntactic literal, symbol, call, function, formula. ... R objects . .x list R objects. gets appended .... .named TRUE FALSE. TRUE (default), unnamed elements output as_symbolic_objs automatically named. .name_all TRUE FALSE. TRUE (default), elements output as_symbolic_objs automatically named. .names_type one c(\"full\", \"sym\", \"head\"). \"full\" output equivalent deparse(x). \"sym\" function returns string equivalent symbol x symbol call arguments. \"head\" function returns string equivalent symbol call name.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/as-symbolic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object(s) as symbolics — as-symbolic","text":"symbolic object. , symbol call.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/as-symbolic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object(s) as symbolics — as-symbolic","text":"","code":"as_symbolic_obj(quote(mean)) #> mean as_symbolic_obj(\"mean\") #> mean as_symbolic_obj(\"base::mean(1:10)\") #> base::mean(1:10) as_symbolic_obj(quote(sd(1:10))) #> sd(1:10) as_symbolic_obj(quote(base::mean)) #> base::mean  as_symbolic_objs(quote(mean), \"mean\", \"base::mean(1:10)\", quote(sd(1:10))) #> [[1]] #> mean #>  #> [[2]] #> mean #>  #> [[3]] #> base::mean(1:10) #>  #> [[4]] #> sd(1:10) #>   x <- list(quote(mean), b = \"mean\", c = \"base::mean(1:10)\", quote(sd(1:10))) as_symbolic_objs(\"fn\", .x = x) #> [[1]] #> fn #>  #> [[2]] #> mean #>  #> $b #> mean #>  #> $c #> base::mean(1:10) #>  #> [[5]] #> sd(1:10) #>  as_symbolic_objs(\"fn\", .x = x, .named = TRUE) #> $fn #> fn #>  #> $mean #> mean #>  #> $b #> mean #>  #> $c #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  as_symbolic_objs(\"fn\", .x = x, .named = TRUE, .name_all = TRUE) #> $fn #> fn #>  #> $mean #> mean #>  #> $mean #> mean #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  as_symbolic_objs(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"full\") #> $fn #> fn #>  #> $mean #> mean #>  #> $mean #> mean #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  as_symbolic_objs(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"sym\") #> $fn #> fn #>  #> $mean #> mean #>  #> $mean #> mean #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  as_symbolic_objs(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"head\") #> $fn #> fn #>  #> $mean #> mean #>  #> $mean #> mean #>  #> $`base::mean` #> base::mean(1:10) #>  #> $sd #> sd(1:10) #>"},{"path":"https://f-dallolio.github.io/helprrr/reference/encall.html","id":null,"dir":"Reference","previous_headings":"","what":"Object(s) as call(s) — encall","title":"Object(s) as call(s) — encall","text":"functions take various R objects return equivalent named calls (e.g. func(x, ...), pkg::func(x, ...), etc.). encall() returns named call. encalls() returns list named calls.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/encall.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object(s) as call(s) — encall","text":"","code":"encall(x)  encalls(..., .x = NULL, .named = FALSE, .name_all = FALSE, .names_type = NULL)"},{"path":"https://f-dallolio.github.io/helprrr/reference/encall.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object(s) as call(s) — encall","text":"x, .x R object. Precisely, syntactic literal, symbol, call, function, formula. ... R objects . .named TRUE FALSE. TRUE (default), unnamed elements output as_symbolic_objs automatically named. .name_all TRUE FALSE. TRUE (default), elements output as_symbolic_objs automatically named. .names_type one c(\"full\", \"sym\", \"head\"). \"full\" output equivalent deparse(x). \"sym\" function returns string equivalent symbol x symbol call arguments. \"head\" function returns string equivalent symbol call name.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/encall.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object(s) as call(s) — encall","text":"call (encall) list calls (encalls).","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/encall.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object(s) as call(s) — encall","text":"","code":"encall(quote(mean)) #> mean() encall(\"mean\") #> mean() encall(\"base::mean(1:10)\") #> base::mean(1:10) encall(quote(sd(1:10))) #> sd(1:10) encall(quote(base::mean)) #> base::mean()  encalls(quote(mean), \"mean\", \"base::mean(1:10)\", quote(sd(1:10))) #> [[1]] #> mean() #>  #> [[2]] #> mean() #>  #> [[3]] #> base::mean(1:10) #>  #> [[4]] #> sd(1:10) #>   x <- list(quote(mean), b = \"mean\", c = \"base::mean(1:10)\", quote(sd(1:10))) encalls(\"fn\", .x = x) #> [[1]] #> fn() #>  #> [[2]] #> mean() #>  #> $b #> mean() #>  #> $c #> base::mean(1:10) #>  #> [[5]] #> sd(1:10) #>  encalls(\"fn\", .x = x, .named = TRUE) #> $`fn()` #> fn() #>  #> $`mean()` #> mean() #>  #> $b #> mean() #>  #> $c #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  encalls(\"fn\", .x = x, .named = TRUE, .name_all = TRUE) #> $`fn()` #> fn() #>  #> $`mean()` #> mean() #>  #> $`mean()` #> mean() #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  encalls(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"full\") #> $`fn()` #> fn() #>  #> $`mean()` #> mean() #>  #> $`mean()` #> mean() #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  encalls(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"sym\") #> $fn #> fn() #>  #> $mean #> mean() #>  #> $mean #> mean() #>  #> $`base::mean(1:10)` #> base::mean(1:10) #>  #> $`sd(1:10)` #> sd(1:10) #>  encalls(\"fn\", .x = x, .named = TRUE, .name_all = TRUE, .names_type = \"head\") #> $fn #> fn() #>  #> $mean #> mean() #>  #> $mean #> mean() #>  #> $`base::mean` #> base::mean(1:10) #>  #> $sd #> sd(1:10) #>"},{"path":"https://f-dallolio.github.io/helprrr/reference/function-calls.html","id":null,"dir":"Reference","previous_headings":"","what":"Get a call from a function — function-calls","title":"Get a call from a function — function-calls","text":"Get call function","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/function-calls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get a call from a function — function-calls","text":"","code":"fn_call(x, with_ns = TRUE, strict = FALSE)  fn_calls(x, with_ns = TRUE, strict = FALSE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/function-calls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get a call from a function — function-calls","text":"x function. with_ns TRUE FALSE. TRUE (default), call includes namespace. strict TRUE FALSE. FALSE (default) x function, function return NULL. throw error otherwise.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/function-calls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get a call from a function — function-calls","text":"call list calls.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/function-names.html","id":null,"dir":"Reference","previous_headings":"","what":"Get function names from functions — function-names","title":"Get function names from functions — function-names","text":"Get function names functions","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/function-names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get function names from functions — function-names","text":"","code":"fn_name(fn, with_ns = TRUE, strict = FALSE)  fn_names(x, with_ns = TRUE, strict = FALSE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/function-names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get function names from functions — function-names","text":"with_ns TRUE FALSE. TRUE (default), function name(s) includes namespace. strict TRUE FALSE. FALSE (default) x function, function return NA. throw error otherwise. x function.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/function-names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get function names from functions — function-names","text":"string (fn_name) character vector (fn_names).","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is-symbol-call-2.html","id":null,"dir":"Reference","previous_headings":"","what":"Extensions of rlang::is_symbol and rlang::is_call — is-symbol-call-2","title":"Extensions of rlang::is_symbol and rlang::is_call — is-symbol-call-2","text":"Extensions rlang::is_symbol rlang::is_call","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is-symbol-call-2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extensions of rlang::is_symbol and rlang::is_call — is-symbol-call-2","text":"","code":"is_symbol2(x, name = NULL, ns_sym_is_sym = TRUE)  is_call2(x, name = NULL, n = NULL, ns = NULL, ns_sym_is_call = FALSE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/is-symbol-call-2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extensions of rlang::is_symbol and rlang::is_call — is-symbol-call-2","text":"x object test. Formulas quosures treated literally. name optional name call match. passed sym() matching. argument vectorised can supply vector names match. case, is_call() returns TRUE least one name matches. ns_sym_is_sym TRUE FALSE. TRUE (default), function returns TRUE symbols call type pkg::fun. FALSE otherwise. n optional number arguments call match. ns namespace call. NULL, namespace participate pattern-matching. empty string \"\" x namespaced call, is_call() returns FALSE. string, is_call() checks x namespaced within ns. Can character vector namespaces, case call match least one , otherwise is_call() returns FALSE. ns_sym_is_call TRUE FALSE. TRUE (default), function returns TRUE calls call type pkg::fun(). FALSE otherwise.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is-symbol-call-2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extensions of rlang::is_symbol and rlang::is_call — is-symbol-call-2","text":"TRUE FALSE.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_integer_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a character vector only contains integers? — is_integer_chr","title":"Does a character vector only contains integers? — is_integer_chr","text":"character vector contains integers?","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_integer_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a character vector only contains integers? — is_integer_chr","text":"","code":"is_integer_chr(x, na.omit = TRUE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/is_integer_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a character vector only contains integers? — is_integer_chr","text":"x character vector object coercible one. na.omit TRUE FALSE. TRUE (default), NAs omitted.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_integer_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a character vector only contains integers? — is_integer_chr","text":"TRUE FALSE.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_numeric_chr.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a character vector only contains numbers? — is_numeric_chr","title":"Does a character vector only contains numbers? — is_numeric_chr","text":"character vector contains numbers?","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_numeric_chr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a character vector only contains numbers? — is_numeric_chr","text":"","code":"is_numeric_chr(x, na.omit = TRUE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/is_numeric_chr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a character vector only contains numbers? — is_numeric_chr","text":"x character vector object coercible one. na.omit TRUE FALSE. TRUE (default), NAs omitted.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/is_numeric_chr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a character vector only contains numbers? — is_numeric_chr","text":"TRUE FALSE.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/namespaced-language.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a language object include namespace? — namespaced-language","title":"Does a language object include namespace? — namespaced-language","text":"language object include namespace?","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/namespaced-language.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a language object include namespace? — namespaced-language","text":"","code":"is_ns_sym(x, ns = NULL, private = NULL)  is_ns_call(x, ns = NULL, private = NULL)"},{"path":"https://f-dallolio.github.io/helprrr/reference/namespaced-language.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a language object include namespace? — namespaced-language","text":"x R object. ns string indicating namespace name. private NULL, TRUE, FALSE. NULL (default) function returns TRUE whether object exported namespace . TRUE function returns TRUE represents object exported namespace (.e. :::). FALSE function returns TRUE represents object exported namespace (.e. ::).","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/namespaced-language.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a language object include namespace? — namespaced-language","text":"TRUE FALSE.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/rep-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Helpers for base::rep — rep-helpers","title":"Helpers for base::rep — rep-helpers","text":"Helpers base::rep","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/rep-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helpers for base::rep — rep-helpers","text":"","code":"rep_times(x, times, len = NULL)  rep_each(x, times, len = NULL)"},{"path":"https://f-dallolio.github.io/helprrr/reference/rep-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helpers for base::rep — rep-helpers","text":"x vector (mode including list) factor (rep ) POSIXct POSIXlt Date object; S4 object containing object. times integer-valued vector giving (non-negative) number times repeat element length length(x), repeat whole vector length 1. Negative NA values error. double vector accepted, inputs coerced integer double vector. len non-negative numeric coercible integer.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/rep-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helpers for base::rep — rep-helpers","text":"vector.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_enum.html","id":null,"dir":"Reference","previous_headings":"","what":"Enumerate and format the elements of a character vector. — str_enum","title":"Enumerate and format the elements of a character vector. — str_enum","text":"Enumerate format elements character vector.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_enum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enumerate and format the elements of a character vector. — str_enum","text":"","code":"str_enum(x, sep = \": \", pad_num = TRUE, format_str = TRUE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/str_enum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Enumerate and format the elements of a character vector. — str_enum","text":"x character vector. sep string indicating separation betweem item numbers strings. pad_num TRUE FALSE. TRUE (default), numbers padded str_pad_num. format_str TRUE FALSE. TRUE (default), strings formatted str_format.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_enum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Enumerate and format the elements of a character vector. — str_enum","text":"character vector.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_format.html","id":null,"dir":"Reference","previous_headings":"","what":"String formatiing/padding — str_format","title":"String formatiing/padding — str_format","text":"String formatiing/padding","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"String formatiing/padding — str_format","text":"","code":"str_format(   x,   width = NULL,   justify = c(\"left\", \"right\", \"centre\", \"none\"),   ellipsis = \"...\",   ... )"},{"path":"https://f-dallolio.github.io/helprrr/reference/str_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"String formatiing/padding — str_format","text":"x character vector string. width integer. NULL (default), automatically set equal max width among elements x. justify one c(\"left\", \"right\", \"centre\", \"none\"). ellipsis string. indicates string truncated. ... arguments passed base::format.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"String formatiing/padding — str_format","text":"character representations elements x common format. , aappropriately padded.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_pad_num.html","id":null,"dir":"Reference","previous_headings":"","what":"Padding of character vector of integers — str_pad_num","title":"Padding of character vector of integers — str_pad_num","text":"Padding character vector integers","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_pad_num.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Padding of character vector of integers — str_pad_num","text":"","code":"str_pad_num(x, pad = \"0\")"},{"path":"https://f-dallolio.github.io/helprrr/reference/str_pad_num.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Padding of character vector of integers — str_pad_num","text":"x numeric vector coercible integer character equivalent. pad string. Defaults \"0\". padding left side.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/str_pad_num.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Padding of character vector of integers — str_pad_num","text":"character vector.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic-types.html","id":null,"dir":"Reference","previous_headings":"","what":"Symbolic types — symbolic-types","title":"Symbolic types — symbolic-types","text":"Symbolic types","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic-types.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symbolic types — symbolic-types","text":"","code":"symbolic_type0(x)  symbolic_type(x, abbr = TRUE)  symbolic_types(x, abbr = TRUE)"},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic-types.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symbolic types — symbolic-types","text":"x symbol, call, function. abbr TRUE FALSE. TRUE, function returns abbreviated symbolic types.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic-types.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symbolic types — symbolic-types","text":"string indicating \"symbolic type\" symbolic object.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic_auto_name.html","id":null,"dir":"Reference","previous_headings":"","what":"Automatically name symbolic lists — symbolic_auto_name","title":"Automatically name symbolic lists — symbolic_auto_name","text":"Automatically name symbolic lists","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic_auto_name.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Automatically name symbolic lists — symbolic_auto_name","text":"","code":"symbolic_auto_name(   x,   .name_all = FALSE,   .names_type = c(\"full\", \"sym\", \"head\") )"},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic_auto_name.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Automatically name symbolic lists — symbolic_auto_name","text":"x list symbolic objects. .names_type one c(\"full\", \"sym\", \"head\"). \"full\" output equivalent deparse(x). \"sym\" function returns string equivalent symbol x symbol call arguments. \"head\" function returns string equivalent symbol call name.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolic_auto_name.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Automatically name symbolic lists — symbolic_auto_name","text":"named list symbolics.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolics-to-strings.html","id":null,"dir":"Reference","previous_headings":"","what":"Symbolic to string or character vector — symbolics-to-strings","title":"Symbolic to string or character vector — symbolics-to-strings","text":"Symbolic string character vector","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolics-to-strings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symbolic to string or character vector — symbolics-to-strings","text":"","code":"symbolic_to_str(x, .names_type = c(\"full\", \"sym\", \"head\"))  symbolic_to_chr(x, .names_type = c(\"full\", \"sym\", \"head\"))"},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolics-to-strings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symbolic to string or character vector — symbolics-to-strings","text":"x symbol, call. .names_type one c(\"full\", \"sym\", \"head\"). \"full\" output equivalent deparse(x). \"sym\" function returns string equivalent symbol x symbol call arguments. \"head\" function returns string equivalent symbol call name.","code":""},{"path":"https://f-dallolio.github.io/helprrr/reference/symbolics-to-strings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symbolic to string or character vector — symbolics-to-strings","text":"string symbolic_to_str character vector symbolic_to_chr.","code":""}]
